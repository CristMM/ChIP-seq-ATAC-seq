Task 1. Create the folder regulatory_elements inside epigenomics_uvic.
	
	Navigate to epigenomics_uvic and we create the folder.			
		
		mkdir regulatory_elements

Task 2.  Intersection of ATAC-seq with H3K27ac and H3K4me1.
	
	We obtain the H3K27ac and H3K4me1 matrices and generate the metadata file with both.
	
		../bin/download.metadata.sh "https://www.encodeproject.org/metadata/?replicates.library.biosample.donor.uuid=d370683e-81e7-473f-8475-7716d027849b&status=released&status=submitted&status=in+progress&biosample_ontology.term_name=sigmoid+colon&biosample_ontology.term_name=stomach&target.label=H3K27ac&type=Experiment"
	
	Then we generate the file bigBed.peaks.ids.txt to obtain the bigBed files related to both matrices.

		mkdir analyses		
		mkdir data
		mkdir data/bigBed.files

		grep -E 'H3K4me1|H3K27ac' metadata.tsv|\
		grep -F "bigBed_narrowPeak" |\
		grep -F "pseudoreplicated_peaks" |\
		grep -F "GRCh38" |\
		awk 'BEGIN{FS=OFS="\t"}{print $1, $11, $23}' |\		
		sort -k2,2 -k1,1r |\
		sort -k2,2 -u > analyses/bigBed.peaks.ids.txt


		cut -f1 analyses/bigBed.peaks.ids.txt |\
		while read filename; do
		wget -P data/bigBed.files "https://www.encodeproject.org/files/$filename/@@download/$filename.bigBed"
		done

	We perform the intersection between ATAC-seq and the files just created. First, we create a new folder.	

		mkdir analyses/peaks.analysis/

	For sigmoid_colon:
		
		# Intersection with H3K4me1 
		bedtools intersect -a ../ATAC-seq/data/bed.files/ENCFF287UHP.bed -b data/bed.files/ENCFF724ZOF.bed -u > analyses/peaks.analysis/SigmoidColon_ATAC_H3K4me1.bed

		# Intersection with H3K27ac 
		bedtools intersect -a ../ATAC-seq/data/bed.files/ENCFF287UHP.bed -b data/bed.files/ENCFF872UHN.bed -u > analyses/peaks.analysis/SigmoidColon_ATAC_H3K27ac.bed

		# Combined intersection of H3K4me1 and H3K27ac 
		bedtools intersect -a analyses/peaks.analysis/SigmoidColon_ATAC_H3K4me1.bed -b analyses/peaks.analysis/SigmoidColon_ATAC_H3K27ac.bed -u > analyses/peaks.analysis/SigmoidColon_ATAC_H3K4me1_H3K27ac.bed
	
	For stomach:
		# Intersection with H3K4me1 
		bedtools intersect -a ../ATAC-seq/data/bed.files/ENCFF762IFP.bed -b data/bed.files/ENCFF372FFI.bed -u > analyses/peaks.analysis/Stomach_ATAC_H3K4me1.bed

		# Intersection with H3K27ac 
		bedtools intersect -a ../ATAC-seq/data/bed.files/ENCFF762IFP.bed -b data/bed.files/ENCFF977LBD.bed -u > analyses/peaks.analysis/Stomach_ATAC_H3K27ac.bed

		# Combined intersection of H3K4me1 and H3K27ac 
		bedtools intersect -a analyses/peaks.analysis/Stomach_ATAC_H3K4me1.bed -b analyses/peaks.analysis/Stomach_ATAC_H3K27ac.bed -u > analyses/peaks.analysis/Stomach_ATAC_H3K4me1_H3K27ac.bed


	Generate the file regulatory.elements.starts.tsv for both tissues.

		mkdir data/tsv.files

		# For sigmoid_colon: obtain the name of the element and its start coordinate.
		awk '{print $4, $2}' analyses/peaks.analysis/SigmoidColon_ATAC_H3K4me1_H3K27ac.bed > data/tsv.files/regulatory_elements.starts_sigmoid_colon.tsv

		# For stomach: obtain the name of the element and its start coordinate.
		awk '{print $4, $2}' analyses/peaks.analysis/Stomach_ATAC_H3K4me1_H3K27ac.bed > data/tsv.files/regulatory_elements.starts_stomach.tsv

	Combine the results from both tissues (sigmoid_colon and stomach) into a single file regulatory_elements.starts.tsv.

		echo -e "Element\tStart" > data/tsv.files/regulatory_elements.starts.tsv
		cat data/tsv.files/regulatory_elements.starts_sigmoid_colon.tsv >> data/tsv.files/regulatory_elements.starts.tsv
		cat data/tsv.files/regulatory_elements.starts_stomach.tsv >> data/tsv.files/regulatory_elements.starts.tsv

	Question:
	How many are they:
		
		expr $(wc -l < data/tsv.files/regulatory_elements.starts.tsv) - 1
			Answer: 86013 records.


Task 3. Generate the file regulatory.elements.starts.tsv filtering by chr1 and select those containing the regulatory region and the coordinates of the region.
	
	We use this query to filter the lines of the file that have chr1 in the first column for each tissue.

		For sigmoid_colon:
			awk '$1 == "chr1" {print $4, $2}' analyses/peaks.analysis/SigmoidColon_ATAC_H3K4me1_H3K27ac.bed > data/tsv.files/regulatory_elements.starts_chr1_sigmoid_colon.tsv
		For stomach:
			awk '$1 == "chr1" {print $4, $2}' analyses/peaks.analysis/Stomach_ATAC_H3K4me1_H3K27ac.bed > data/tsv.files/regulatory_elements.starts_chr1_stomach.tsv

		Combine both files into one.

			echo -e > data/tsv.files/regulatory_elements.starts_chr1.tsv
			cat data/tsv.files/regulatory_elements.starts_chr1_sigmoid_colon.tsv >> data/tsv.files/regulatory_elements.starts_chr1.tsv
			cat data/tsv.files/regulatory_elements.starts_chr1_stomach.tsv >> data/tsv.files/regulatory_elements.starts_chr1.tsv


Task 4. Use the protein-coding gene file with genes from chr1 and generate the file gene.starts.tsv.
	
	Download the file gencode.v24.coding.gene.body.bed.

		mkdir annotation
		wget -P annotation "https://www.encodeproject.org/files/gencode.v24.primary_assembly.annotation/@@download/gencode.v24.primary_assembly.annotation.gtf.gz"

	We filter the lines of the downloaded file with those containing chr1 to generate the file.

		awk '$1 == "chr1"' annotation/gencode.v24.protein.coding.gene.body.bed > annotation/gencode.v24.protein.coding.gene.body.chr1.bed

	Generate the file gene.starts.tsv to obtain the gene name from the first column and the start coordinate from the second.

			awk 'BEGIN{FS=OFS="\t"} {if ($6 == "+") {start = $2} else {start = $3}; print $4, start}' annotation/gencode.v24.protein.coding.gene.body.chr1.bed > data/tsv.files/gene.starts.tsv
	
	If we run this query:
	
		wc -l data/tsv.files/gene.starts.tsv
			Result: 2047 records.

Task 5. Use the Python script to obtain the closest gene, the start of the gene, and the distance of the regulatory element from the file gene.starts.tsv.
	
	Download the script and open it to understand its functionality.
		
		python ../bin/get.distance.py -h
	
	Edit the script to ensure it works when it receives two inputs (--input corresponds to the file we are using, 
		in this case gene.starts.tsv, and --start corresponds to the coordinate of a regulatory element).

			get.distance.py
			#!/usr/bin/env python

			#************
			# LIBRARIES *
			#************

			import sys
			from optparse import OptionParser

			#*****************
			# OPTION PARSING *
			#*****************

			parser = OptionParser()
			parser.add_option("-i", "--input", dest="input")
			parser.add_option("-s", "--start", dest="start")
			options, args = parser.parse_args()

			open_input = open(options.input)
			enhancer_start = int(options.start)

			#********
			# BEGIN *
			#********

			x = 1000000  # set maximum distance to 1 Mb
			selectedGene = ""  									# initialize the gene as empty
			selectedGeneStart = 0  								# initialize the start coordinate of the gene as empty

			for line in open_input.readlines():  
				gene, gene_start = line.strip().split('\t')  	# split the line into two columns based on a tab
				gene_start = int(gene_start)  					# convert the start coordinate of the gene to an integer
				
				# compute the absolute value of the difference between gene_start and enhancer_start
				distance = abs(gene_start - enhancer_start)
				
				# if this absolute value is lower than x
				if distance < x:
					x = distance  						# update x with the new minimum distance
					selectedGene = gene  				# update the selected gene
					selectedGeneStart = gene_start  	# update the start coordinate of the selected gene

			# Print the result: closest gene, its start position, and the distance to the regulatory element
			print("\t".join([selectedGene, str(selectedGeneStart), str(x)]))

	Run this query to get the result using the previous script with the input parameters.

		python3 ../bin/get.distance.py --input data/tsv.file

			Results:
			s/gene.starts.tsv      --start 980000
			ENSG00000187642.9       982093  2093


Task 6. Obtain the closest gene and the distance of the closest gene.
	Use the Python script created earlier, using the file regulatory.elements.starts.tsv to generate the file regulatoryElements.genes.distances.tsv.

	tail -n +2 data/tsv.files/regulatory_elements.starts.tsv | while read element start; do
	python ../bin/get.distance.py --input data/tsv.files/gene.starts.tsv --start "$start"
	done > regulatoryElements.genes.distances.tsv


Task 7. Obtain the mean and median distances stored in regulatoryElements.genes.distances.tsv.
	
	We create an R file where we take the values from the previously generated file and obtain the requested data.

		mean_median_distance.R
		# Read the TSV file
		data <- read.table("regulatoryElements.genes.distances.tsv", header=FALSE, sep="\t")

		# Assign column names
		colnames(data) <- c("Gene", "GeneStart", "Distance")

		# Check the first records to ensure the file has loaded correctly
		head(data)

		# Calculate the mean of the distances
		mean_distance <- mean(data$Distance)
		cat("Mean distance:", mean_distance, "\n")

		# Calculate the median of the distances
		median_distance <- median(data$Distance)
		cat("Median distance:", median_distance, "\n")

	Run the R script we just created to get the results.

		Rscript mean_median_distance.R

			Result:
               			 Gene 		  GeneStart Distance
				1 ENSG00000187634.10    924879   107583
				2 ENSG00000187634.10    924879   107583
				3 ENSG00000187634.10    924879   107583
				4 ENSG00000187634.10    924879    20614
				5 ENSG00000187634.10    924879    20614
				6 ENSG00000187634.10    924879     1200
				Mean distance: 188599.2
				Median distance: 52286